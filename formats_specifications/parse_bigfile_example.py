#!/usr/bin/env python
#
#  This is an example of how to use the autogenerated Python module
# to parse CTR's BIGFILE.BIG
#
# Example usage:
#  * install kaitai-struct (http://kaitai.io/#download)
#
#  * compile the `.ksy` into a python module (this generates `ctr_big.py`)
#     ksc --target python --outdir . bigfile.ksy
#
#  * install kaitai-struct for python
#     pip install kaitaistruct
#
#  * you can now run this script to parse you BIGFILE.BIG
#    ./parse_bigfile_example.py /path/to/BIGFILE.BIG
#
#  * sample output:
#    BIGFILE contains 608 entries
#    000: offset=6144, size=458808
#    001: offset=466944, size=551532
#    002: offset=1019904, size=458808
#    003: offset=1480704, size=517820
#    004: offset=1998848, size=458808
#    ...
#


import sys

from ctr_big import CtrBig


if len(sys.argv) != 2:
    print('Usage: ' + sys.argv[0] + '</path/to/BIGFILE.BIG>')
    sys.exit(1)


# parse the file
# we can also use `from_bytes` to parse from in-memory files
ctr = CtrBig.from_file(sys.argv[1])


print('BIGFILE contains {} entries'.format(ctr.total_files))


# just print the index
for idx, f, in enumerate(ctr.index):
    print('{:03d}: offset={}, size={}'.format(idx, f.offset * 2048, f.size))


# we can also dump an entry
entry_id = 0

# grab the content of the entry
content = ctr.index[entry_id].file_content


output_filename = '{:03d}'.format(entry_id)
destination = open(output_filename, 'wb')
destination.write(content)

# done!
