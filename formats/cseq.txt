CSEQ is a custom sequence format used in Crash Team racing.
It contains both event sequences and instrument definitions.

--------------
File structure
--------------

header {
  dword - total filesize 
  byte  - long samples count
  byte  - short samples count
  word  - sequence count (multiple sequences in a single file)
}

long samples count * {
  byte - always 1?? assumed magic
  byte - sample volume
  word - always 0??
  word - base pitch (frequency to be used at middle C (60))
  word - sample ID
  word - unknown (mostly 0x80FF, varies in japanese tracks)
  byte - reverb level
  byte - unknown (maybe reverb too? lower byte?)
}

short samples count * {
  byte - always 1?? assumed magic
  byte - sample volume
  word - base pitch
  word - sample ID
  word - always 0??
}

sequence count * {
  word - offset to sequence
}

3 bytes - unknown, always 0
//for NTSC-U demo it's 1 byte

sequence count * {

  byte - tracks count
  word - BPM
  word - TPQN

  tracks count * {
    word - offset to track data
  }

  optional word - only read if tracksCount % 2 == 0

  tracks count * {
    word - denotes sample set to use. if 0 - uses long samples array, if 1 - uses short samples array
    event[] {
      byte[] - delta time variable
      byte - opcode
      event data {
        byte - optional value 1
        byte - optional value 2 depending on opcode
      }
  }

}


--------------------
opcodes:
0x01 - Note Off
0x02 - unknown. used once in skyway. assumed end track.
0x03 - End Track
0x04 - unknown. used once in canyon, start of track_03
0x05 - Note On
0x06 - assumed velocity (volume) not actually used in most tracks
0x07 - assumed pan
0x08 - unknown. used in japanese tracks
0x09 - patch change
0x0A - assumed bend (pitch shift)

data length:
Note On - 2 bytes (note pitch, note 
End Track - 0 bytes
others - 1 byte